---
title: "Project 4 ML"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Pre-Processing of Data

```{r}
library(tidyverse)
library(tidymodels)
library(readxl)
library(beans)

set.seed(250)
data_split = initial_split(beans, prop = 0.8, strata = class)

bean_training = training(data_split)
bean_testing = testing(data_split)

bean_recipe = recipe(class ~ ., data = bean_training) %>% 
  step_normalize()

pca_recipe =
  bean_recipe %>%
  step_pca(all_predictors())
```

## Classification Tree

```{r}
library(rpart)
library(rpart.plot)
library(ggplot2)

decision_tree_model = decision_tree() %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

tree_workflow = workflow() %>% 
  add_model(decision_tree_model)%>% 
  add_recipe(bean_recipe)

tree_fit = fit(tree_workflow, bean_training)

tree_fit %>% 
  extract_fit_engine() %>% 
  rpart.plot()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(tree_fit, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(tree_fit, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
library(vip)
logistic_reg_model = multinom_reg(penalty = tune(), mixture = 1) %>%
  set_engine("nnet") %>% 
  set_mode("classification")

lasso_workflow = workflow() %>% 
  add_recipe(bean_recipe) %>% 
  add_model(logistic_reg_model)

lambda_grid = grid_regular(penalty(),levels=50)

bean_boot = bootstraps(bean_training, strata = class)

set.seed(250)
lasso_grid = tune_grid(lasso_workflow, resamples = bean_boot, grid = lambda_grid)

lasso_grid %>% 
  select_best()

penalty_lasso = 0.00005179475
```

```{r}
highest_auc = lasso_grid %>%
  select_best()

final_lasso = finalize_workflow(
  lasso_workflow %>% update_model(logistic_reg_model),
  highest_auc
)

final_lasso_fit = fit(final_lasso, bean_testing)

final_lasso_fit %>% 
  pull_workflow_fit()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
lasso_workflow_pca = workflow() %>% 
  add_recipe(pca_recipe) %>% 
  add_model(logistic_reg_model)

set.seed(250)
lasso_grid_pca = tune_grid(lasso_workflow_pca, resamples = bean_boot, grid = lambda_grid)

lasso_grid_pca %>% 
  select_best()

penalty_lasso_pca = 0.0003393222
```

```{r}
highest_auc_pca = lasso_grid_pca %>%
  select_best()

final_lasso_pca = finalize_workflow(
  lasso_workflow_pca %>% update_model(logistic_reg_model),
  highest_auc_pca
)

final_lasso_fit_pca = fit(final_lasso_pca, bean_testing)

final_lasso_fit_pca %>% 
  pull_workflow_fit()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit_pca, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit_pca, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
library(kernlab)
svm_model = svm_rbf(cost =tune()) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

svm_workflow = workflow() %>% 
  add_recipe(bean_recipe) %>% 
  add_model(svm_model)

cost_grid = grid_regular(cost(),levels=10)

set.seed(250)
svm_grid = tune_grid(svm_workflow, resamples = bean_boot, grid = cost_grid)

```

```{r}
library(kernlab)
library(kknn)

set.seed(250)
bean_folds = vfold_cv(bean_training, strata = class, repeats = 5)


bean_workflow_set_logistic = 
   workflow_set(
      preproc = list(none = bean_recipe, pca = pca_recipe), 
      models = list(logistic = logistic_reg_model))

lasso_workflow = 

grid_control =
   control_grid(
      save_pred = TRUE,
      parallel_over = "everything",
      save_workflow = TRUE
   )

grid_results_logistic =
   bean_workflow_set_logistic %>%
   workflow_map(
      seed = 250,
      resamples = bean_folds,
      grid = 9,
      control = grid_control
   )

grid_results_logistic %>% 
  extract_workflow_set_result("logistic") %>% 
  select_best()
```
