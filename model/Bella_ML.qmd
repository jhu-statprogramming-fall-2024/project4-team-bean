---
title: "Project 4 ML"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Pre-Processing of Data

```{r}
#| label: "Data Loading and Splitting"
library(tidyverse)
library(tidymodels)
library(readxl)
library(beans)

set.seed(250)
data_split = initial_split(beans, prop = 0.8, strata = class)

bean_training = training(data_split)
bean_testing = testing(data_split)

bean_recipe = recipe(class ~ ., data = bean_training) %>% 
  step_normalize()

pca_recipe =
  bean_recipe %>%
  step_pca(all_predictors())
```

## PCA Visualization

```{r}
#| label: "Visualizing PCA Components"
pca_prep = prep(pca_recipe)

tidied_pca = tidy(pca_prep,2)

tidied_pca %>%
  filter(component %in% paste0("PC", 1:5)) %>%
  mutate(component = fct_inorder(component)) %>%
  ggplot(aes(value, terms, fill = terms)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~component, nrow = 1) +
  labs(y = NULL)

library(tidytext)

tidied_pca %>%
  filter(component %in% paste0("PC", 1:5)) %>%
  group_by(component) %>%
  top_n(8, abs(value)) %>%
  ungroup() %>%
  mutate(terms = reorder_within(terms, abs(value), component)) %>%
  ggplot(aes(abs(value), terms, fill = value > 0)) +
  geom_col() +
  facet_wrap(~component, scales = "free_y") +
  scale_y_reordered() +
  labs(
    x = "Absolute value of contribution",
    y = NULL, fill = "Positive?"
  )
```

## Classification Tree

```{r}
#| label: "Basic classification tree"
library(rpart)
library(rpart.plot)
library(ggplot2)

decision_tree_model = decision_tree() %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

tree_workflow = workflow() %>% 
  add_model(decision_tree_model)%>% 
  add_recipe(bean_recipe)

tree_fit = fit(tree_workflow, bean_training)

tree_fit %>% 
  extract_fit_engine() %>% 
  rpart.plot()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(tree_fit, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(tree_fit, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
#| label: "Lasso training"
logistic_reg_model = multinom_reg(penalty = tune(), mixture = 1) %>%
  set_engine("nnet") %>% 
  set_mode("classification")

lasso_workflow = workflow() %>% 
  add_recipe(bean_recipe) %>% 
  add_model(logistic_reg_model)

lambda_grid = grid_regular(penalty(),levels=50)

bean_boot = bootstraps(bean_training, strata = class)

set.seed(250)
lasso_grid = tune_grid(lasso_workflow, resamples = bean_boot, grid = lambda_grid)

lasso_grid %>% 
  select_best()

penalty_lasso = 0.00005179475
```

```{r}
#| label: "Lasso testing"
final_lasso_model = multinom_reg(penalty = 0.00005179475, mixture = 1) %>%
  set_engine("nnet") %>% 
  set_mode("classification")

final_lasso = lasso_workflow %>% 
  update_model(final_lasso_model)

final_lasso_fit = fit(final_lasso, bean_testing)

final_lasso_fit %>% 
  extract_fit_parsnip()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
#| label: "Lasso with PCA training"
lasso_workflow_pca = workflow() %>% 
  add_recipe(pca_recipe) %>% 
  add_model(logistic_reg_model)

set.seed(250)
lasso_grid_pca = tune_grid(lasso_workflow_pca, resamples = bean_boot, grid = lambda_grid)

lasso_grid_pca %>% 
  select_best()

penalty_lasso_pca = 0.0003393222
```

```{r}
#| label: "Lasso with PCA testing"
final_lasso_model_pca = multinom_reg(penalty = 0.0003393222, mixture = 1) %>%
  set_engine("nnet") %>% 
  set_mode("classification")

final_lasso_pca = lasso_workflow %>% 
  update_model(final_lasso_model_pca)

final_lasso_fit_pca = fit(final_lasso_pca, bean_testing)

final_lasso_fit_pca %>% 
  extract_fit_parsnip()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit_pca, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_lasso_fit_pca, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
#| label: "SVM training"
library(kernlab)
svm_model = svm_rbf(cost =tune()) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

svm_workflow = workflow() %>% 
  add_recipe(bean_recipe) %>% 
  add_model(svm_model)

cost_grid = grid_regular(cost(),levels=10)

set.seed(250)
svm_grid = tune_grid(svm_workflow, resamples = bean_boot, grid = cost_grid)
 
svm_grid %>% 
   select_best()

0.03125
```

```{r}
#| label: "SVM testing"
final_svm_model = svm_rbf(cost = 0.03125) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

final_svm = svm_workflow %>% 
  update_model(final_svm_model)

final_svm_fit = fit(final_svm, bean_testing)

final_svm_fit %>% 
  extract_fit_parsnip()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_svm_fit, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_svm_fit, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```

```{r}
#| label: "SVM training with PCA"
svm_model_pca = svm_rbf(cost =tune()) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

svm_workflow_pca = workflow() %>% 
  add_recipe(bean_recipe) %>% 
  add_model(svm_model_pca)

cost_grid = grid_regular(cost(),levels=10)

set.seed(250)
svm_grid_pca = tune_grid(svm_workflow_pca, resamples = bean_boot, grid = cost_grid)
 
svm_grid_pca %>% 
   select_best()
```

```{r}
#| label: "SVM testing with PCA"
final_svm_model_pca = svm_rbf(cost = 0.03125) %>%
  set_engine("kernlab") %>% 
  set_mode("classification")

final_svm_pca = svm_workflow_pca %>% 
  update_model(final_svm_model_pca)

final_svm_fit_pca = fit(final_svm_pca, bean_testing)

final_svm_fit_pca %>% 
  extract_fit_parsnip()

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_svm_fit_pca, bean_testing)) %>% 
  conf_mat(truth = class, estimate = .pred_class)

bean_testing %>% 
  select(class) %>% 
  bind_cols(predict(final_svm_fit_pca, bean_testing, type = "prob")) %>% 
  roc_curve(class, .pred_barbunya, .pred_bombay, .pred_cali, .pred_dermason, .pred_horoz, .pred_seker, .pred_sira) %>%
  autoplot()
```